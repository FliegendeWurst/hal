#!/usr/bin/env python3
import sys, os

#some necessary configuration:
sys.path.append("/home/simon/projects/hal/build/lib/") #this is where your hal python lib is located
os.environ["HAL_BASE_PATH"] = "/home/simon/projects/hal/build/" # hal base path+

import hal_py

netlist_to_read = "/home/simon/workspaces/2022_12_09/simple_risc_v/simple_risc_v.hal"
gate_library_path = "/home/simon/projects/hal/plugins/real_world_reversing/gate_libraries/ice40ultra_iphone.hgl"

#initialize HAL
hal_py.plugin_manager.load_all_plugins()

#read netlist
netlist = hal_py.NetlistFactory.load_netlist(netlist_to_read)

from hal_plugins import bitorder_propagation

known_bitorders = [(136, "IN"), (136, "OUT"), (4, "3540_RADDR"), (4, "3540_RDATA"), (4, "3540_WADDR"), (4, "3540_WDATA"), (4, "3540_MASK"), (110, "D"), (110, "Q"), (138, "IN"), (138, "OUT"), (139, "OUT"), (139, "IN"), (140, "IN"), (140, "OUT"), (137, "OUT"), (137, "IN"), (141, "OUT"), (141, "A"), (141, "B"), (130, "A"), (130, "B"), (130, "OUT"), (2, "4417_DATAOUT"), (2, "4417_DATAIN"), (2, "4418_DATAIN"), (2, "4417_MASKWREN"), (2, "4417_ADDRESS"), (2, "4418_DATAOUT"), (131, "OUT"), (131, "B"), (131, "A"), (3, "3541_WDATA"), (3, "3541_RADDR"), (3, "3542_RDATA"), (3, "3541_WADDR"), (3, "3542_WDATA"), (3, "3541_RDATA"), (3, "3541_MASK"), (5, "3539_RDATA"), (5, "3539_WADDR"), (5, "3539_WDATA"), (5, "3539_RADDR")]
unknown_bitorders = [(62, "B"), (62, "O"), (62, "A"), (63, "O"), (63, "B"), (63, "A"), (136, "IN"), (136, "OUT"), (37, "O"), (37, "B"), (37, "A"), (38, "B"), (38, "O"), (38, "A"), (39, "A"), (39, "B"), (39, "O"), (106, "Q"), (106, "D"), (119, "D"), (119, "Q"), (73, "B"), (73, "O"), (73, "A"), (74, "B"), (74, "O"), (74, "A"), (121, "Q"), (121, "D"), (22, "A"), (22, "O"), (22, "B"), (89, "Q"), (89, "D"), (90, "D"), (90, "Q"), (64, "A"), (64, "B"), (64, "O"), (65, "A"), (65, "O"), (65, "B"), (75, "B"), (75, "O"), (75, "A"), (76, "D"), (76, "Q"), (77, "Q"), (77, "D"), (78, "D"), (78, "Q"), (108, "Q"), (108, "D"), (109, "Q"), (109, "D"), (110, "D"), (110, "Q"), (82, "D"), (82, "Q"), (83, "D"), (83, "Q"), (84, "D"), (84, "Q"), (138, "IN"), (138, "OUT"), (139, "OUT"), (139, "IN"), (44, "A"), (44, "O"), (44, "B"), (45, "A"), (45, "B"), (45, "O"), (66, "O"), (66, "A"), (66, "B"), (67, "B"), (67, "O"), (67, "A"), (68, "A"), (68, "B"), (68, "O"), (29, "B"), (29, "O"), (29, "A"), (30, "O"), (30, "B"), (30, "A"), (31, "O"), (31, "B"), (31, "A"), (32, "O"), (32, "A"), (32, "B"), (55, "A"), (55, "O"), (55, "B"), (137, "OUT"), (137, "IN"), (101, "D"), (101, "Q"), (124, "D"), (124, "Q"), (116, "D"), (116, "Q"), (128, "D"), (128, "Q"), (47, "A"), (47, "O"), (47, "B"), (48, "B"), (48, "O"), (48, "A"), (25, "B"), (25, "A"), (25, "O"), (120, "D"), (120, "Q"), (96, "Q"), (96, "D"), (97, "Q"), (97, "D"), (20, "B"), (20, "A"), (20, "O"), (91, "D"), (91, "Q"), (141, "OUT"), (141, "A"), (141, "B"), (117, "D"), (117, "Q"), (15, "A"), (15, "O"), (15, "B"), (16, "A"), (16, "B"), (16, "O"), (17, "O"), (17, "A"), (17, "B"), (18, "A"), (18, "O"), (18, "B"), (19, "A"), (19, "B"), (19, "O"), (9, "O"), (9, "B"), (9, "A"), (72, "A"), (72, "O"), (72, "B"), (94, "D"), (94, "Q"), (127, "Q"), (127, "D"), (92, "D"), (92, "Q"), (93, "D"), (93, "Q"), (103, "Q"), (103, "D"), (122, "D"), (122, "Q"), (23, "O"), (23, "A"), (23, "B"), (43, "A"), (43, "O"), (43, "B"), (107, "D"), (107, "Q"), (49, "A"), (49, "B"), (49, "O"), (50, "B"), (50, "A"), (50, "O"), (51, "B"), (51, "O"), (51, "A"), (115, "Q"), (115, "D"), (28, "B"), (28, "A"), (28, "O"), (33, "A"), (33, "B"), (33, "O"), (34, "B"), (34, "A"), (34, "O"), (35, "B"), (35, "A"), (35, "O"), (36, "O"), (36, "A"), (36, "B"), (123, "Q"), (123, "D"), (10, "B"), (10, "A"), (10, "O"), (105, "Q"), (105, "D"), (52, "B"), (52, "A"), (52, "O"), (104, "D"), (104, "Q"), (59, "O"), (59, "A"), (59, "B"), (60, "B"), (60, "A"), (60, "O"), (61, "B"), (61, "O"), (61, "A"), (95, "Q"), (95, "D"), (130, "A"), (130, "B"), (130, "OUT"), (56, "A"), (56, "O"), (56, "B"), (57, "A"), (57, "O"), (57, "B"), (58, "A"), (58, "O"), (58, "B"), (40, "B"), (40, "O"), (40, "A"), (41, "A"), (41, "B"), (41, "O"), (42, "A"), (42, "B"), (42, "O"), (125, "D"), (125, "Q"), (46, "A"), (46, "B"), (46, "O"), (113, "D"), (113, "Q"), (26, "A"), (26, "B"), (26, "O"), (12, "O"), (12, "B"), (12, "A"), (13, "B"), (13, "A"), (13, "O"), (111, "D"), (111, "Q"), (102, "D"), (102, "Q"), (79, "D"), (79, "Q"), (80, "D"), (80, "Q"), (85, "D"), (85, "Q"), (86, "D"), (86, "Q"), (53, "O"), (53, "A"), (53, "B"), (54, "A"), (54, "O"), (54, "B"), (11, "B"), (11, "A"), (11, "O"), (118, "Q"), (118, "D"), (98, "Q"), (98, "D"), (99, "D"), (99, "Q"), (100, "Q"), (100, "D"), (126, "Q"), (126, "D"), (131, "OUT"), (131, "B"), (131, "A"), (81, "Q"), (81, "D"), (14, "A"), (14, "O"), (14, "B"), (27, "B"), (27, "A"), (27, "O"), (114, "Q"), (114, "D"), (87, "D"), (87, "Q"), (88, "Q"), (88, "D"), (21, "A"), (21, "O"), (21, "B"), (69, "B"), (69, "A"), (69, "O"), (70, "B"), (70, "A"), (70, "O"), (71, "B"), (71, "O"), (71, "A"), (112, "Q"), (112, "D"), (24, "O"), (24, "B"), (24, "A"), (129, "D"), (129, "Q")]

res_1 = bitorder_propagation.BitorderPropagationPlugin.propagate_bitorder(netlist, known_bitorders, unknown_bitorders)

print("Done")

#unload everything hal related
hal_py.plugin_manager.unload_all_plugins()
