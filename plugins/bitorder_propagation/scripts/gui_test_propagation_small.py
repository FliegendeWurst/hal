from hal_plugins import bitorder_propagation

# known_bitorders = []
# unknown_bitorders = []

# simple_ric
known_bitorders = [(110, "IN"), (110, "OUT"), (2, "4418_DATAOUT"), (2, "4417_MASKWREN"), (2, "4417_DATAOUT"), (2, "4417_ADDRESS"), (2, "4417_DATAIN"), (2, "4418_DATAIN"), (109, "A"), (109, "B"), (113, "OUT"), (113, "IN"), (103, "OUT"), (103, "A"), (103, "B"), (4, "3540_RDATA"), (4, "3540_RADDR"), (4, "3540_WDATA"), (4, "3540_MASK"), (4, "3540_WADDR"), (111, "OUT"), (111, "IN"), (112, "OUT"), (112, "IN"), (3, "3539_RADDR"), (3, "3539_RDATA"), (3, "3539_WADDR"), (3, "3539_WDATA"), (104, "B"), (104, "OUT"), (104, "A"), (5, "3541_MASK"), (5, "3542_RDATA"), (5, "3541_RDATA"), (5, "3542_WDATA"), (5, "3541_WDATA"), (5, "3541_WADDR"), (5, "3541_RADDR"), ]
unknown_bitorders = [(72, "D"), (72, "Q"), (74, "Q"), (74, "D"), (18, "Q"), (18, "D"), (32, "D"), (32, "Q"), (71, "Q"), (71, "D"), (23, "Q"), (23, "D"), (62, "D"), (62, "Q"), (86, "Q"), (86, "D"), (83, "D"), (83, "Q"), (81, "D"), (81, "Q"), (21, "Q"), (21, "D"), (34, "Q"), (34, "D"), (94, "Q"), (94, "D"), (24, "D"), (24, "Q"), (28, "Q"), (28, "D"), (64, "D"), (64, "Q"), (95, "D"), (95, "Q"), (20, "Q"), (20, "D"), (102, "D"), (102, "Q"), (55, "D"), (55, "Q"), (91, "D"), (91, "Q"), (61, "Q"), (61, "D"), (47, "D"), (47, "Q"), (14, "D"), (14, "Q"), (19, "Q"), (19, "D"), (59, "D"), (59, "Q"), (39, "D"), (39, "Q"), (68, "Q"), (68, "D"), (100, "D"), (100, "Q"), (13, "D"), (13, "Q"), (46, "Q"), (46, "D"), (78, "D"), (78, "Q"), (76, "D"), (76, "Q"), (101, "Q"), (101, "D"), (90, "Q"), (90, "D"), (54, "D"), (54, "Q"), (53, "Q"), (53, "D"), (9, "D"), (9, "Q"), (45, "D"), (45, "Q"), (25, "D"), (25, "Q"), (67, "D"), (67, "Q"), (38, "Q"), (38, "D"), (15, "Q"), (15, "D"), (75, "Q"), (75, "D"), (56, "Q"), (56, "D"), (63, "D"), (63, "Q"), (51, "D"), (51, "Q"), (12, "Q"), (12, "D"), (50, "Q"), (50, "D"), (29, "D"), (29, "Q"), (43, "D"), (43, "Q"), (99, "Q"), (99, "D"), (40, "D"), (40, "Q"), (41, "D"), (41, "Q"), (80, "Q"), (80, "D"), (31, "Q"), (31, "D"), (85, "Q"), (85, "D"), (11, "Q"), (11, "D"), (26, "D"), (26, "Q"), (27, "Q"), (27, "D"), (58, "Q"), (58, "D"), (42, "D"), (42, "Q"), (69, "D"), (69, "Q"), (73, "Q"), (73, "D"), (77, "Q"), (77, "D"), (16, "D"), (16, "Q"), (57, "Q"), (57, "D"), (33, "Q"), (33, "D"), (30, "D"), (30, "Q"), (22, "Q"), (22, "D"), (84, "D"), (84, "Q"), (10, "Q"), (10, "D"), (87, "D"), (87, "Q"), (93, "Q"), (93, "D"), (17, "D"), (17, "Q"), (49, "Q"), (49, "D"), (36, "D"), (36, "Q"), (44, "Q"), (44, "D"), (60, "Q"), (60, "D"), (70, "Q"), (70, "D"), (48, "D"), (48, "Q"), (79, "Q"), (79, "D"), (96, "D"), (96, "Q"), (35, "D"), (35, "Q"), (92, "Q"), (92, "D"), (89, "Q"), (89, "D"), (98, "Q"), (98, "D"), (88, "D"), (88, "Q"), (97, "D"), (97, "Q"), (66, "D"), (66, "Q"), (65, "Q"), (65, "D"), (37, "Q"), (37, "D"), (52, "Q"), (52, "D"), (82, "Q"), (82, "D"), ]

res_1 = bitorder_propagation.BitorderPropagationPlugin.propagate_bitorder(netlist, (125, "B"), (83, "Q"))

print("Done")
print("{}".format(res_1))
