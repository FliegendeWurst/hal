#include "verilator/verilator.h"

#include <sstream>

namespace hal
{
    namespace verilator
    {
        const std::string get_testbench_cpp_template()
        {
            const char* testbench_cpp_template =
                    "#include \"V<design_name>.h\"\n"
                    "#include \"saleae_file.h\"\n"
                    "#include \"saleae_parser.h\"\n"
                    "#include \"saleae_directory.h\"\n"
                    "#include \"verilated_vcd_c.h\"\n"
                    "#include <iostream>\n"
                    "#include <stdlib.h>\n"
                    "#include <verilated.h>\n"
                    "\n"
                    "#include <fstream>\n"
                    "\n"
                    "#define MAX_SIM_TIME 20\n"
                    "vluint64_t sim_time = 0;\n"
                    "vluint64_t to_simulate = 0;\n"
                    "\n"
                    "V<design_name> *dut = new V<design_name>;\n"
                    "VerilatedVcdC *m_trace = new VerilatedVcdC;\n"
                    "\n"
                    "double sc_time_stamp() { return sim_time; }\n"
                    "\n"
                    "void propagate_events() {\n"
                    "  dut->eval();\n"
                    "  m_trace->dump(sim_time);\n"
                    "  sim_time += to_simulate;\n"
                    "}\n"
                    "\n"
                    "void set_simulation_value(void *obj, uint64_t t, int val) {\n"
                    "  vluint8_t* vluintPtr = static_cast<vluint8_t*>(obj);\n"
                    "  if (t != sim_time) {\n"
                    "    to_simulate = t - sim_time;\n"
                    "    propagate_events();\n"
                    "  }\n"
                    "  *vluintPtr = (vluint8_t)val;\n"
                    "  // std::cerr << \"set_simulation_value: t=\" << std::dec << t << \" val=\" << val << \" -> \" << std::hex << (uintptr_t) obj << std::endl;\n"
                    "}\n"
                    "\n"
                    "int main(int argc, char **argv, char **env) {\n"
                    "  hal::SaleaeParser sp(\"saleae/saleae.json\");\n"
                    "\n"
                    "  std::unordered_map<std::string,hal::Net*> netMap;\n"
                    "  for (const hal::SaleaeDirectory::ListEntry& sdle : sp.get_directory().get_net_list())\n"
                    "  {\n"
                    "    netMap.insert(std::make_pair(sdle.name,new hal::Net(sdle.name,sdle.id)));\n"
                    "  }\n"
                    "\n"
                    "  Verilated::traceEverOn(true);\n"
                    "\n"
                    "  dut->trace(m_trace, 1);\n"
                    "  m_trace->open(\"waveform.vcd\");\n"
                    "\n"
                    "//  <set_vcc>\n"
                    "//  <set_gnd>\n"
                    "\n"
                    "  <set_callbacks>\n"
                    "\n"
                    "\n"
                    "  int counter = 0;\n"
                    "  while (sp.next_event()) {\n"
                    "    counter++;\n"
                    "    if (counter % 1000000 == 0) {\n"
                    "      printf(\"%d\\n\", counter);\n"
                    "    }\n"
                    "  }\n"
                    "  \n"
                    "  dut->eval();\n"
                    "  m_trace->dump(sim_time + to_simulate);\n"
                    "  dut->final();\n"
                    "\n"
                    "  m_trace->close();\n"
                    "  delete dut;\n"
                    "  exit(EXIT_SUCCESS);\n"
                    "}\n";
            return std::string(testbench_cpp_template);

        }
    }    // namespace verilator
}    // namespace hal
